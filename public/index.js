/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ (() => {

eval("// import { initializeApp } from \"firebase/app\";\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyD4hkvtcR1OrLyYIRPR10ZWhdncF584rsI\",\n//   authDomain: \"mage-5b9f9.firebaseapp.com\",\n//   projectId: \"mage-5b9f9\",\n//   storageBucket: \"mage-5b9f9.appspot.com\",\n//   messagingSenderId: \"338442865042\",\n//   appId: \"1:338442865042:web:c75da25ea80909534d594b\",\n//   measurementId: \"G-XVN8KVCCK3\",\n// };\n\n// initializeApp(firebaseConfig);\n// const app = initializeApp(firebaseConfig);\n// const auth = getAuth();\n\nconst tabItems = document.querySelectorAll(\".tab-item\");\nconst tabContentItems = document.querySelectorAll(\".tab-content-item\");\nconst productDom = document.querySelector(\".product-case\");\nconst cartTotal = document.querySelector(\".cart-total\");\nconst cartBtn = document.querySelector(\".fa-cart-plus\");\nconst cartOverlay = document.querySelector(\".cart-overlay\");\nconst closeBtn = document.querySelectorAll(\".fa-times-circle\");\nconst profileBtn = document.querySelectorAll(\".fa-user-circle\");\nconst profilePage = document.querySelector(\".outer-profile\");\nconst cartDisplay = document.querySelector(\".cart-display\");\nconst clearCartBtn = document.querySelector(\".clear-cart-btn\");\nconst closeMenu = document.querySelector(\".close-menu\");\nconst barMenu = document.querySelector(\".fa-bars-staggered\");\nconst sideMenu = document.querySelector(\".side-menu\");\nconst profileIcon = document.querySelector(\".profile-link\");\nconst search = document.querySelector(\".search\");\nconst checkoutBtn = document.querySelector(\".checkout-btn\");\nconst signupForm = document.querySelector(\"#signup-form\");\n\n// Signup new users\nsignupForm.addEventListener(\"submit\", () => {\n  console.log(123);\n});\n// signupForm.addEventListener(\"submit\", (e) => {\n//   e.preventDefault();\n\n//   // const email = signupForm.email.value;\n//   // const password = signupForm.password.value;\n\n//   createUserWithEmailAndPassword(auth, email, password).then((cred) => {\n//     // console.log(cred.user);\n//     // window.location(\"public/gallery.html\");\n//     // signupForm.reset();\n//   });\n// });\n\n// checkout with stripe\ncheckoutBtn.addEventListener(\"click\", () => {\n  console.log(123);\n});\n\n// Switch between tabs\nfunction selectItem(e) {\n  removeBorder();\n  removeShow();\n  this.classList.add(\"current\");\n  const tabContentItem = document.querySelector(`#${this.id}-content`);\n  tabContentItem.classList.add(\"show\");\n}\n\n// remove border from each tab\nfunction removeBorder() {\n  tabItems.forEach((item) => item.classList.remove(\"current\"));\n}\n\n// remove the show class from each tab\nfunction removeShow() {\n  tabContentItems.forEach((item) => item.classList.remove(\"show\"));\n}\n\n// display menu\nfunction displayMenu() {\n  sideMenu.classList.toggle(\"show\");\n}\n\n// display the profile page\nfunction displayProfile() {\n  profilePage.classList.add(\"show\");\n}\n\n// Event Listeners\nbarMenu.addEventListener(\"click\", displayMenu);\ncloseMenu.addEventListener(\"click\", displayMenu);\n\ntabItems.forEach((item) => item.addEventListener(\"click\", selectItem));\n\ncartBtn.addEventListener(\"click\", () => {\n  cartOverlay.classList.toggle(\"show\");\n});\n\ncloseBtn.forEach((btn) =>\n  btn.addEventListener(\"click\", (e) => {\n    close = e.target.parentElement.parentElement;\n    close.classList.remove(\"show\");\n  })\n);\n\nprofileBtn.forEach((btn) => btn.addEventListener(\"click\", displayProfile));\n\nprofileIcon.addEventListener(\"click\", () => {\n  profilePage.classList.add(\"show\");\n  displayMenu();\n});\n\n// Cart array\nlet cart = [];\n// add to cart btn\nlet buttonsDom = [];\n\n// fetch products\nclass Products {\n  async getProducts(searchText) {\n    try {\n      let result = await fetch(\"products.json\");\n      let data = await result.json();\n      let products = data.items;\n      products = products.map((item) => {\n        const title = item.name_d;\n        const price = item.price;\n        const id = item.id;\n        return { title, price, id };\n      });\n      return products;\n    } catch (error) {}\n  }\n}\n\nclass UI {\n  // Display the products to the Dom\n  displayProducts(products) {\n    let result = \"\";\n    products.forEach((product) => {\n      result += `\n          <div class=\"item\">\n                <img src=\"./images/5eaf615122919-1.png\" alt=\"charcoal protraits\"/>\n                <div class=\"grp\">\n                  <h4 class=\"name\">John Doe</h4>\n                  <h4 class=\"categories\">Abstract</h4>\n                </div>\n                <small class=\"title\">${product.title}</small>\n                <div class=\"check\">\n                  <small class=\"price\">$${product.price}</small>\n                  <button href=\"#!\" class=\"plus-cart\" data-id=${product.id}>add to cart</button>\n                  \n                </div>\n          </div>\n      `;\n    });\n    productDom.innerHTML = result;\n  }\n\n  searchProducts(products) {\n    search.addEventListener(\"input\", (e) => {\n      const searchText = e.target.value;\n\n      let matches = products.filter((product) => {\n        const regex = new RegExp(`^${searchText}`, \"gi\");\n        return product.title.match(regex);\n      });\n\n      if (searchText.length === 0) {\n        this.displayProducts(products);\n      }\n\n      this.outputSearch(matches);\n    });\n  }\n\n  outputSearch(matches) {\n    this.displayProducts(matches);\n    this.getBagButtons();\n  }\n\n  // Addd to cartBtn functionality\n  getBagButtons() {\n    const buttons = [...document.querySelectorAll(\".plus-cart\")];\n    buttonsDom = buttons;\n    buttons.forEach((button) => {\n      let id = button.dataset.id;\n      let inCart = cart.find((item) => item.id === id);\n      if (inCart) {\n        button.innerText = \"In cart\";\n        button.disabled = true;\n      }\n      button.addEventListener(\"click\", (e) => {\n        e.target.innerText = \"In Cart\";\n        e.target.disabled = true;\n\n        // Add item to the cart\n        let cartItem = { ...Storage.getProducts(id) };\n        cart = [...cart, cartItem];\n\n        // Save cart in storage\n        Storage.saveCart(cart);\n\n        // Set cart total values\n        this.setCartValues(cart);\n        // Add Item to the cart Dom\n        this.addCartItem(cartItem);\n      });\n    });\n  }\n\n  // Cart Math\n  setCartValues(cart) {\n    let tempTotal = 0;\n    cart.map((item) => {\n      tempTotal += parseFloat(item.price);\n    });\n    cartTotal.innerText = `${tempTotal}`;\n  }\n\n  // Display the item to the Dom\n  addCartItem(item) {\n    const div = document.createElement(\"div\");\n    div.classList.add(\"cart-items\");\n    div.innerHTML = `\n    <img src=\"./images/5eaf615122919-1.png\" alt=\"\" />\n            <div class=\"cart-info\">\n              <h2 class=\"author\">john doe</h2>\n\n              <p class=\"title\">${item.title}</p>\n              <h4>$${item.price}</h4>\n              <small class=\"description\"\n                >Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                Eveniet provident vitae nihil. Inventore accusamus odit tenetur\n                ullam, doloremque totam animi.</small\n              >\n              <a href=\"#!\" class=\"remove-item\" data-id=\"${item.id}\">remove</a>\n            </div>\n    `;\n    cartDisplay.appendChild(div);\n  }\n\n  // Setup the UI and funtionality on DomContentLoaded\n  setupAPP() {\n    cart = Storage.getCart();\n    this.setCartValues(cart);\n    this.populateCart(cart);\n  }\n\n  // Add every item in the cart to the cartDom\n  populateCart(cart) {\n    cart.forEach((item) => this.addCartItem(item));\n  }\n\n  // cart funtionality\n  cartLogic() {\n    // eventListener to clear cart\n    clearCartBtn.addEventListener(\"click\", () => {\n      this.clearCart();\n    });\n\n    // remove individual item from the Dom\n    cartDisplay.addEventListener(\"click\", (e) => {\n      if (e.target.classList.contains(\"remove-item\")) {\n        let removeItem = e.target;\n        let id = removeItem.dataset.id;\n        cartDisplay.removeChild(removeItem.parentElement.parentElement);\n        this.removeItem(id);\n      }\n    });\n  }\n\n  // Clear cart logic\n  clearCart() {\n    let cartItems = cart.map((item) => item.id);\n    cartItems.forEach((id) => this.removeItem(id));\n\n    while (cartDisplay.children.length > 0) {\n      cartDisplay.removeChild(cartDisplay.children[0]);\n    }\n  }\n\n  // Remove item from the cart\n  removeItem(id) {\n    // filter the target id from cart storage\n    cart = cart.filter((item) => item.id !== id);\n    this.setCartValues(cart);\n    Storage.saveCart(cart);\n    // reset the add to cartBtn\n    let button = this.getSingleButton(id);\n    button.disabled = false;\n    button.innerHTML = \"add to cart\";\n  }\n\n  getSingleButton(id) {\n    return buttonsDom.find((button) => button.dataset.id === id);\n  }\n}\n\nclass Storage {\n  // Save products in the storage\n  static saveProduct(products) {\n    localStorage.setItem(\"products\", JSON.stringify(products));\n  }\n\n  // Get products from the storage\n  static getProducts(id) {\n    let products = JSON.parse(localStorage.getItem(\"products\"));\n    return products.find((product) => product.id === id);\n  }\n\n  // save the cart into the storage\n  static saveCart(cart) {\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  // Get items in the cart from storage\n  static getCart() {\n    return localStorage.getItem(\"cart\")\n      ? JSON.parse(localStorage.getItem(\"cart\"))\n      : [];\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const ui = new UI();\n  const products = new Products();\n\n  ui.setupAPP();\n\n  products\n    .getProducts()\n    .then((products) => {\n      ui.displayProducts(products);\n      ui.searchProducts(products);\n      Storage.saveProduct(products);\n    })\n    .then(() => {\n      ui.getBagButtons();\n      ui.cartLogic();\n    });\n});\n\n\n//# sourceURL=webpack://mage/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main.js"]();
/******/ 	
/******/ })()
;